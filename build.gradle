buildscript {
    repositories {
	   maven { url = 'https://files.minecraftforge.net/maven' }
	   jcenter()
	   mavenCentral()
    }
    dependencies {
	   classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = minecraft_version + '-' + release_version
group = 'icey.survivaloverhaul' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'survivaloverhaul'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#		  Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
	   client {
		  workingDirectory project.file('run')

		  // Recommended logging data for a userdev environment
		  property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

		  // Recommended logging level for the console
		  property 'forge.logging.console.level', 'debug'
		  
		  // Makes it so that mods that use mixins can work in a
		  // dev environment instead of crashing on startup
		  // Note that this REQUIRES the dependencies' mixin mappings to be
		  // updated to the latest mappings
		  property 'mixin.env.disableRefMap', 'true'
          arg '-mixin.config=' + archivesBaseName + '.mixins.json'

		  mods {
			 survivaloverhaul {
				source sourceSets.main
			 }
		  }
	   }

	   server {
		  workingDirectory project.file('run/server')

		  // Recommended logging data for a userdev environment
		  property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

		  // Recommended logging level for the console
		  property 'forge.logging.console.level', 'debug'
		  
		  property 'mixin.env.disableRefMap', 'true'
          arg '-mixin.config=' + archivesBaseName + '.mixins.json'

		  mods {
			 survivaloverhaul {
				source sourceSets.main
			 }
		  }
	   }

	   data {
		  workingDirectory project.file('run')

		  // Recommended logging data for a userdev environment
		  property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

		  // Recommended logging level for the console
		  property 'forge.logging.console.level', 'debug'

		  // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		  args '--mod', 'survivaloverhaul', '--all', '--output', file('src/generated/resources'), '--existing', file('src/main/resources/')

		  mods {
			 survivaloverhaul {
				source sourceSets.main
			 }
		  }
	   }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
	   name = 'CurseForge'
	   url = 'https://minecraft.curseforge.com/api/maven/'
    }
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.k-4u.nl"
	}
	maven {
	   url = "https://www.cursemaven.com"
    }
    maven {
    	url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
	
	// External libraries.
	// These are REQUIRED for the mod to compile correctly and should not be removed.
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.4-4.0.3.5:api") // Curios API
	compileOnly fg.deobf('serene-seasons:SereneSeasons-1.16.5:4.0.1.91:api') // Serene Seasons API
	
	// compileOnly fg.deobf('tough-as-nails:ToughAsNails-1.16.5:4.0.1.10:api') // Tough As Nails API
	
	// compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65:api")
	
	// Runtime mods. These are primarily for testing and can be removed as necessary.
	// runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.4-4.0.3.5") // Curios
	runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65")
	runtimeOnly fg.deobf('serene-seasons:SereneSeasons-1.16.5:4.0.1.91:universal') // Serene Seasons
	// runtimeOnly fg.deobf('tough-as-nails:ToughAsNails-1.16.5:4.0.1.10:universal') // Tough As Nails
	
	// runtimeOnly fg.deobf("curse.maven:artifacts-312353:3164601")
	// compile fg.deobf('curse.maven:obfuscate-289380:3169370') // Obfuscate
	
	// For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
	   attributes([
		  "Specification-Title": "survivaloverhaul",
		  "Specification-Vendor": "Icey",
		  "Specification-Version": release_version, // yeah
		  "Implementation-Title": project.name,
		  "Implementation-Version": "${version}",
		  "Implementation-Vendor" :"Icey",
		  "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
	   ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
	   mavenJava(MavenPublication) {
		  artifact jar
	   }
    }
    repositories {
	   maven {
		  url "file:///${project.projectDir}/mcmodsrepo"
	   }
    }
}
